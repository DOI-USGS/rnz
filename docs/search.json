[{"path":"/articles/rnz.html","id":"rnz-r-netcdf-zarr","dir":"Articles","previous_headings":"","what":"rnz R NetCDF Zarr","title":"rnz R NetCDF Zarr","text":"rnz wraps pizzarr RNetCDF package providing similar set functions RNetCDF package. intent allow access NetCDF zarr essentially way done NetCDF packages NetCDF backend can easily implement equivalent ZARR back end using base R. vignette shows basic operation package using core demo dataset derived : https://gdo-dcp.ucllnl.org/downscaled_cmip_projections/ NetCDF Zarr copy dataset included.","code":"# these files are in `z_demo()` as a file store # and via \"https://raw.githubusercontent.com/DOI-USGS/rnz/main/inst/extdata/bcsd.zarr/\" as an http store. gsub(normalizePath(dirname(rnz::z_demo())), \"\",      list.files(rnz::z_demo(), recursive = TRUE, all.files = TRUE),       fixed = TRUE) #>  [1] \".zattrs\"           \".zgroup\"           \".zmetadata\"        #>  [4] \"latitude/.zarray\"  \"latitude/.zattrs\"  \"latitude/0\"        #>  [7] \"longitude/.zarray\" \"longitude/.zattrs\" \"longitude/0\"       #> [10] \"pr/.zarray\"        \"pr/.zattrs\"        \"pr/0.0.0\"          #> [13] \"tas/.zarray\"       \"tas/.zattrs\"       \"tas/0.0.0\"         #> [16] \"time/.zarray\"      \"time/.zattrs\"      \"time/0\" (z <- rnz::open_nz(rnz::z_demo())) #> <ZarrGroup> #>   Public: #>     clone: function (deep = FALSE)  #>     contains_item: function (item)  #>     create_dataset: function (name, data = NA, ...)  #>     create_group: function (name, overwrite = FALSE)  #>     get_attrs: function ()  #>     get_chunk_store: function ()  #>     get_item: function (item)  #>     get_meta: function ()  #>     get_name: function ()  #>     get_path: function ()  #>     get_read_only: function ()  #>     get_store: function ()  #>     get_synchronizer: function ()  #>     initialize: function (store, path = NA, read_only = FALSE, chunk_store = NA,  #>   Private: #>     attrs: Attributes, R6 #>     cache_attrs: NULL #>     chunk_store: NA #>     create_dataset_nosync: function (name, data = NA, ...)  #>     create_group_nosync: function (name, overwrite = FALSE)  #>     item_path: function (item)  #>     key_prefix:  #>     meta: list #>     path:  #>     read_only: TRUE #>     store: DirectoryStore, Store, R6 #>     synchronizer: NULL cat(c(capture.output(rnz::nzdump(rnz::z_demo()))[1:25], \"...\"), sep = \"\\n\") #> zarr { #> dimensions: #> latitude = 33 ; #> longitude = 81 ; #> time = 12 ; #> variables: #>  <f4 latitude(latitude) ; #>      latitude:_CoordinateAxisType = Lat ; #>      latitude:axis = Y ; #>      latitude:bounds = latitude_bnds ; #>      latitude:long_name = Latitude ; #>      latitude:standard_name = latitude ; #>      latitude:units = degrees_north ; #>  <f4 longitude(longitude) ; #>      longitude:_CoordinateAxisType = Lon ; #>      longitude:axis = X ; #>      longitude:bounds = longitude_bnds ; #>      longitude:long_name = Longitude ; #>      longitude:standard_name = longitude ; #>      longitude:units = degrees_east ; #>  <f4 pr(time, latitude, longitude) ; #>      pr:coordinates = time latitude longitude  ; #>      pr:long_name = monthly_sum_pr ; #>      pr:name = pr ; #>      pr:units = mm/m ; #> ... nc_file <- rnz::z_demo(format = \"netcdf\")  (nc <- RNetCDF::open.nc(nc_file)) #> [1] 65536 #> attr(,\"handle_ptr\") #> <pointer: 0x0000013bd98cc5e0> #> attr(,\"class\") #> [1] \"NetCDF\" cat(c(capture.output(RNetCDF::print.nc(nc))[1:25], \"...\"), sep = \"\\n\") #> netcdf classic { #> dimensions: #>  latitude = 33 ; #>  longitude = 81 ; #>  time = UNLIMITED ; // (12 currently) #> variables: #>  NC_FLOAT latitude(latitude) ; #>      NC_CHAR latitude:standard_name = \"latitude\" ; #>      NC_CHAR latitude:long_name = \"Latitude\" ; #>      NC_CHAR latitude:units = \"degrees_north\" ; #>      NC_CHAR latitude:axis = \"Y\" ; #>      NC_CHAR latitude:bounds = \"latitude_bnds\" ; #>      NC_CHAR latitude:_CoordinateAxisType = \"Lat\" ; #>  NC_FLOAT longitude(longitude) ; #>      NC_CHAR longitude:standard_name = \"longitude\" ; #>      NC_CHAR longitude:long_name = \"Longitude\" ; #>      NC_CHAR longitude:units = \"degrees_east\" ; #>      NC_CHAR longitude:axis = \"X\" ; #>      NC_CHAR longitude:bounds = \"longitude_bnds\" ; #>      NC_CHAR longitude:_CoordinateAxisType = \"Lon\" ; #>  NC_FLOAT pr(longitude, latitude, time) ; #>      NC_CHAR pr:long_name = \"monthly_sum_pr\" ; #>      NC_CHAR pr:units = \"mm/m\" ; #>      NC_FLOAT pr:_FillValue = 100000002004087734272 ; #>      NC_CHAR pr:name = \"pr\" ; #> ..."},{"path":"/articles/rnz.html","id":"inquire-about-elements-of-a-zarr-store","dir":"Articles","previous_headings":"rnz R NetCDF Zarr","what":"“Inquire” about elements of a Zarr store","title":"rnz R NetCDF Zarr","text":"can normal inquire stuff using 0-indexed ids names.","code":""},{"path":"/articles/rnz.html","id":"inquire-about-a-store","dir":"Articles","previous_headings":"rnz R NetCDF Zarr > “Inquire” about elements of a Zarr store","what":"Inquire about a store","title":"rnz R NetCDF Zarr","text":"","code":"rnz::inq_nz_source(nc) #> $ndims #> [1] 3 #>  #> $nvars #> [1] 5 #>  #> $ngatts #> [1] 30 #>  #> $unlimdimid #> [1] 2 #>  #> $format #> [1] \"classic\" #>  #> $libvers #> [1] \"4.9.2 of Mar  7 2024 22:39:28 $\" rnz::inq_nz_source(z) #> $ndims #> [1] 3 #>  #> $nvars #> [1] 5 #>  #> $ngatts #> [1] 30 #>  #> $format #> [1] \"DirectoryStore\""},{"path":"/articles/rnz.html","id":"inquire-about-a-group","dir":"Articles","previous_headings":"rnz R NetCDF Zarr > “Inquire” about elements of a Zarr store","what":"Inquire about a group","title":"rnz R NetCDF Zarr","text":"TODO: get rnz working root groups?","code":"rnz::inq_grp(nc) #> $self #> [1] 65536 #> attr(,\"handle_ptr\") #> <pointer: 0x0000013bd98cc5e0> #> attr(,\"class\") #> [1] \"NetCDF\" #>  #> $grps #> list() #>  #> $name #> [1] \"/\" #>  #> $fullname #> [1] \"/\" #>  #> $dimids #> [1] 0 1 2 #>  #> $unlimids #> [1] 2 #>  #> $varids #> [1] 0 1 2 3 4 #>  #> $typeids #> integer(0) #>  #> $ngatts #> [1] 30 rnz::inq_grp(z) #> $grps #> list() #>  #> $name #> [1] \"/\" #>  #> $fullname #> [1] \"/\" #>  #> $dimids #> [1] 0 1 2 #>  #> $varids #> [1] 0 1 2 3 4 #>  #> $ngatts #> [1] 30"},{"path":"/articles/rnz.html","id":"inquire-about-a-dimension","dir":"Articles","previous_headings":"rnz R NetCDF Zarr > “Inquire” about elements of a Zarr store","what":"Inquire about a dimension","title":"rnz R NetCDF Zarr","text":"","code":"rnz::inq_dim(nc, 2) #> $id #> [1] 2 #>  #> $name #> [1] \"time\" #>  #> $length #> [1] 12 #>  #> $unlim #> [1] TRUE rnz::inq_dim(z, 2) #> $id #> [1] 2 #>  #> $name #> [1] \"time\" #>  #> $length #> [1] 12 rnz::inq_dim(nc, \"time\") #> $id #> [1] 2 #>  #> $name #> [1] \"time\" #>  #> $length #> [1] 12 #>  #> $unlim #> [1] TRUE rnz::inq_dim(z, \"time\") #> $id #> [1] 2 #>  #> $name #> [1] \"time\" #>  #> $length #> [1] 12"},{"path":"/articles/rnz.html","id":"inquire-about-a-variable","dir":"Articles","previous_headings":"rnz R NetCDF Zarr > “Inquire” about elements of a Zarr store","what":"Inquire about a variable","title":"rnz R NetCDF Zarr","text":"","code":"rnz::inq_var(nc, 4) #> $id #> [1] 4 #>  #> $name #> [1] \"time\" #>  #> $type #> [1] \"NC_DOUBLE\" #>  #> $ndims #> [1] 1 #>  #> $dimids #> [1] 2 #>  #> $natts #> [1] 4 rnz::inq_var(z, 4) #> $id #> [1] 4 #>  #> $name #> [1] \"time\" #>  #> $type #> [1] \"<f8\" #>  #> $ndims #> [1] 1 #>  #> $dimids #> [1] 2 #>  #> $natts #> [1] 4 rnz::inq_var(nc, \"time\") #> $id #> [1] 4 #>  #> $name #> [1] \"time\" #>  #> $type #> [1] \"NC_DOUBLE\" #>  #> $ndims #> [1] 1 #>  #> $dimids #> [1] 2 #>  #> $natts #> [1] 4 rnz::inq_var(z, \"time\") #> $id #> [1] 4 #>  #> $name #> [1] \"time\" #>  #> $type #> [1] \"<f8\" #>  #> $ndims #> [1] 1 #>  #> $dimids #> [1] 2 #>  #> $natts #> [1] 4"},{"path":"/articles/rnz.html","id":"inquire-about-an-attribute","dir":"Articles","previous_headings":"rnz R NetCDF Zarr > “Inquire” about elements of a Zarr store","what":"Inquire about an attribute","title":"rnz R NetCDF Zarr","text":"","code":"rnz::inq_att(nc, \"time\", \"units\") #> $id #> [1] 1 #>  #> $name #> [1] \"units\" #>  #> $type #> [1] \"NC_CHAR\" #>  #> $length #> [1] 30 rnz::inq_att(z, \"time\", \"units\") #> $id #> [1] 3 #>  #> $name #> [1] \"units\" #>  #> $type #> [1] \"character\" #>  #> $length #> [1] 1 rnz::inq_att(nc, 4, 3) #> $id #> [1] 3 #>  #> $name #> [1] \"_CoordinateAxisType\" #>  #> $type #> [1] \"NC_CHAR\" #>  #> $length #> [1] 4 rnz::inq_att(z, 4, 3) #> $id #> [1] 3 #>  #> $name #> [1] \"units\" #>  #> $type #> [1] \"character\" #>  #> $length #> [1] 1"},{"path":"/articles/rnz.html","id":"get-a-variable","dir":"Articles","previous_headings":"rnz R NetCDF Zarr > “Inquire” about elements of a Zarr store","what":"Get a variable","title":"rnz R NetCDF Zarr","text":"","code":"rnz::get_var(nc, \"time\") #>  [1] 17927 17955 17986 18016 18047 18077 18108 18139 18169 18200 18230 18261 rnz::get_var(z, \"time\") #>  [1] 17927 17955 17986 18016 18047 18077 18108 18139 18169 18200 18230 18261 rnz::get_var(nc, var = \"pr\",               start = c(1,1,5), count = c(3,3,1)) #> , , 1 #>  #>       [,1]  [,2]  [,3] #> [1,] 69.27 69.59 69.51 #> [2,] 60.19 65.76 68.04 #> [3,] 49.68 55.63 55.45 rnz::get_var(z, var = \"pr\",               start = c(1,1,5), count = c(3,3,1)) #> , , 1 #>  #>        [,1]   [,2]   [,3] #> [1,] 134.90 137.65 149.01 #> [2,]  59.46  73.97  79.23 #> [3,] 101.86 101.06  96.12 # TODO: figure out why aperm #3 pr <- rnz::get_var(z, \"pr\") |>   aperm(c(3,2,1))  # TODO: figure out NA handling pr[pr > 1000] <- NA  image(pr[,,1], col = hcl.colors(12, \"PuBuGn\", rev = TRUE),       useRaster = TRUE, axes = FALSE) pr <- rnz::get_var(nc, \"pr\")  image(pr[,,1], col = hcl.colors(12, \"PuBuGn\", rev = TRUE),       useRaster = TRUE, axes = FALSE)"},{"path":"/articles/rnz.html","id":"get-an-attribute","dir":"Articles","previous_headings":"rnz R NetCDF Zarr > “Inquire” about elements of a Zarr store","what":"Get an attribute","title":"rnz R NetCDF Zarr","text":"’s now.","code":"rnz::get_att(nc, \"time\", \"units\") #> [1] \"days since 1950-01-01 00:00:00\" rnz::get_att(z, \"time\", \"units\") #> [1] \"days since 1950-01-01\" rnz::get_att(nc, 4, 1) #> [1] \"days since 1950-01-01 00:00:00\" rnz::get_att(z, 4, 3) #> [1] \"days since 1950-01-01\""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Blodgett. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Blodgett D (2024). rnz: R NetCDF ZARR. R package version 0.2.0, https://github.com/DOI-USGS/rnz.","code":"@Manual{,   title = {rnz: R NetCDF ZARR},   author = {David Blodgett},   year = {2024},   note = {R package version 0.2.0},   url = {https://github.com/DOI-USGS/rnz}, }"},{"path":"/DISCLAIMER.html","id":null,"dir":"","previous_headings":"","what":"Disclaimer","title":"Disclaimer","text":"software preliminary provisional subject revision. provided meet need timely best science. software received final approval U.S. Geological Survey (USGS). warranty, expressed implied, made USGS U.S. Government functionality software related material shall fact release constitute warranty. software provided condition neither USGS U.S. Government shall held liable damages resulting authorized unauthorized use software.","code":""},{"path":"/index.html","id":"rnz-r-netcdf-zarr","dir":"","previous_headings":"","what":"R NetCDF ZARR","title":"R NetCDF ZARR","text":"work progress package aiming provide RNetCDF-like set functions wrap pizzarr package.","code":"z <- rnz::z_demo() # to use a directory store  # to use an http store z <- \"https://raw.githubusercontent.com/DOI-USGS/rnz/main/inst/extdata/bcsd.zarr/\"  bcsd <- rnz::open_nz(z)  class(bcsd) #> [1] \"ZarrGroup\" \"R6\"  rnz::inq_nz_source(bcsd) |> str() #> List of 4 #>  $ ndims : int 3 #>  $ nvars : int 5 #>  $ ngatts: int 30 #>  $ format: chr \"HttpStore\"  rnz::inq_grp(bcsd) |> str() # only the root group supported #> List of 6 #>  $ grps    : list() #>  $ name    : chr \"/\" #>  $ fullname: chr \"/\" #>  $ dimids  : num [1:3] 0 1 2 #>  $ varids  : num [1:5] 0 1 2 3 4 #>  $ ngatts  : int 30  rnz::inq_dim(bcsd, 0) |> str() #> List of 3 #>  $ id    : num 0 #>  $ name  : chr \"latitude\" #>  $ length: int 33 rnz::inq_dim(bcsd, \"latitude\") |> str() #> List of 3 #>  $ id    : num 0 #>  $ name  : chr \"latitude\" #>  $ length: int 33  rnz::inq_var(bcsd, 0) |> str() #> List of 6 #>  $ id    : num 0 #>  $ name  : chr \"latitude\" #>  $ type  : chr \"<f4\" #>  $ ndims : int 1 #>  $ dimids: num 0 #>  $ natts : int 6 rnz::inq_var(bcsd, \"latitude\") |> str() #> List of 6 #>  $ id    : num 0 #>  $ name  : chr \"latitude\" #>  $ type  : chr \"<f4\" #>  $ ndims : int 1 #>  $ dimids: num 0 #>  $ natts : int 6  rnz::inq_att(bcsd, 0, 5) |> str() #> List of 4 #>  $ id    : num 5 #>  $ name  : chr \"units\" #>  $ type  : chr \"character\" #>  $ length: int 1 rnz::inq_att(bcsd, \"latitude\", \"units\") |> str() #> List of 4 #>  $ id    : num 5 #>  $ name  : chr \"units\" #>  $ type  : chr \"character\" #>  $ length: int 1  rnz::get_var(bcsd, 0) |> str() #>  num [1:33(1d)] 33.1 33.2 33.3 33.4 33.6 ... rnz::get_var(bcsd, \"latitude\") |> str() #>  num [1:33(1d)] 33.1 33.2 33.3 33.4 33.6 ...  rnz::get_att(bcsd, 0, 5) #> [1] \"degrees_north\" rnz::get_att(bcsd, \"time\", \"units\") #> [1] \"days since 1950-01-01\"  rnz::nzdump(bcsd) #> zarr { #> dimensions: #> latitude = 33 ; #> longitude = 81 ; #> time = 12 ; #> variables: #>  <f4 latitude(latitude) ; #>      latitude:_CoordinateAxisType = Lat ; #>      latitude:axis = Y ; #>      latitude:bounds = latitude_bnds ; #>      latitude:long_name = Latitude ; #>      latitude:standard_name = latitude ; #>      latitude:units = degrees_north ; #>  <f4 longitude(longitude) ; #>      longitude:_CoordinateAxisType = Lon ; #>      longitude:axis = X ; #>      longitude:bounds = longitude_bnds ; #>      longitude:long_name = Longitude ; #>      longitude:standard_name = longitude ; #>      longitude:units = degrees_east ; #>  <f4 pr(time, latitude, longitude) ; #>      pr:coordinates = time latitude longitude  ; #>      pr:long_name = monthly_sum_pr ; #>      pr:name = pr ; #>      pr:units = mm/m ; #>  <f4 tas(time, latitude, longitude) ; #>      tas:coordinates = time latitude longitude  ; #>      tas:long_name = monthly_avg_tas ; #>      tas:missing_value = 1.00000002004088e+20 ; #>      tas:name = tas ; #>      tas:units = C ; #>  <f8 time(time) ; #>      time:_CoordinateAxisType = Time ; #>      time:calendar = standard ; #>      time:standard_name = time ; #>      time:units = days since 1950-01-01 ; #>  #> // global attributes: #>      :CDI = Climate Data Interface version 1.5.6 (http://code.zmaw.de/projects/cdi) ; #>      :CDO = Climate Data Operators version 1.5.6.1 (http://code.zmaw.de/projects/cdo) ; #>      :Conventions = CF-1.0 ; #>      :History = Translated to CF-1.0 Conventions by Netcdf-Java CDM (CFGridWriter2) #> Original Dataset = bcsd_obs; Translation Date = 2019-01-03T20:03:59.756Z ; #>      :Metadata_Conventions = Unidata Dataset Discovery v1.0 ; #>      :NCO = netCDF Operators version 4.7.6 (Homepage = http://nco.sf.net, Code = http://github.com/nco/nco) ; #>      :acknowledgment = Maurer, E.P., A.W. Wood, J.C. Adam, D.P. Lettenmaier, and B. Nijssen, 2002, A Long-Term Hydrologically-Based Data Set of Land Surface Fluxes and States for the Conterminous United States, J. Climate 15(22), 3237-3251 ; #>      :cdm_data_type = Grid ; #>      :date_created = 2014 ; #>      :date_issued = 2015-11-01 ; #>      :geospatial_lat_max = 37.0625 ; #>      :geospatial_lat_min = 33.0625 ; #>      :geospatial_lon_max = -74.9375 ; #>      :geospatial_lon_min = -84.9375 ; #>      :history = Mon Jan  7 18:59:08 2019: ncks -4 -L3 bcsd_obs_1999_two_var.nc bcsd_obs_1999_two_var.nc.comp #> Thu May 08 12:07:18 2014: cdo monsum gridded_obs/daily/gridded_obs.daily.Prcp.1950.nc gridded_obs/monthly/gridded_obs.monthly.pr.1950.nc ; #>      :id = cida.usgs.gov/bcsd_obs ; #>      :institution = Varies, see http://gdo-dcp.ucllnl.org/downscaled_cmip_projections/ ; #>      :keywords = Atmospheric Temperature, Air Temperature Atmosphere, Precipitation, Rain, Maximum Daily Temperature, Minimum  Daily Temperature ; #>      :keywords_vocabulary = GCMD Science Keywords ; #>      :license = Freely available ; #>      :naming_authority = cida.usgs.gov ; #>      :processing_level = Gridded meteorological observations ; #>      :publisher_email = dblodgett@usgs.gov ; #>      :publisher_name = Center for Integrated Data Analytics ; #>      :publisher_url = https://www.cida.usgs.gov/ ; #>      :summary = These are the monthly observational data used for BCSD downscaling. See: http://gdo-dcp.ucllnl.org/downscaled_cmip_projections/dcpInterface.html#About for more information. ; #>      :time_coverage_end = 1999-12-15T00:00 ; #>      :time_coverage_resolution = P1M ; #>      :time_coverage_start = 1950-01-15T00:00 ; #>      :title = Monthly Gridded Meteorological Observations ; #> }"},{"path":"/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"R NetCDF ZARR","text":"software preliminary provisional subject revision. provided meet need timely best science. software received final approval U.S. Geological Survey (USGS). warranty, expressed implied, made USGS U.S. Government functionality software related material shall fact release constitute warranty. software provided condition neither USGS U.S. Government shall held liable damages resulting authorized unauthorized use software.","code":""},{"path":"/reference/get_att.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Zarr Attribute — get_att","title":"Get Zarr Attribute — get_att","text":"Get Zarr Attribute","code":""},{"path":"/reference/get_att.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Zarr Attribute — get_att","text":"","code":"get_att(z, var, att)  # S3 method for character get_att(z, var, att)  # S3 method for NetCDF get_att(z, var, att)  # S3 method for ZarrGroup get_att(z, var, att)  # S3 method for `NULL` get_att(z, var, att)"},{"path":"/reference/get_att.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Zarr Attribute — get_att","text":"z open ZarrGroup returned open_nz var integer character zero-based index id variable interest name variable interest. -1 \"global\" global attributes att integer character zero-based index id attribute interest name attribute interest.","code":""},{"path":"/reference/get_att.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Zarr Attribute — get_att","text":"vector containing requested attribute att.get.nc","code":""},{"path":"/reference/get_att.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Zarr Attribute — get_att","text":"","code":"z <- open_nz(z_demo())  get_att(z, -1, 2) #> [1] \"CF-1.0\"  get_att(z, \"global\", \"Conventions\") #> [1] \"CF-1.0\"  get_att(z, 0, 3) #> [1] \"Latitude\"  get_att(z, \"latitude\", \"long_name\") #> [1] \"Latitude\"  # equivalent data in NetCDF if(requireNamespace(\"RNetCDF\", quietly = TRUE)) {   nc <- z_demo(format = \"netcdf\")    (get_att(nc, 0, 0))    (get_att(nc, \"global\", 1)) } #> [1] \"CF-1.0\""},{"path":"/reference/get_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Zarr Variable — get_var","title":"Get Zarr Variable — get_var","text":"Get Zarr Variable","code":""},{"path":"/reference/get_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Zarr Variable — get_var","text":"","code":"get_var(z, var, start = NA, count = NA)  # S3 method for character get_var(z, var, start = NA, count = NA)  # S3 method for NetCDF get_var(z, var, start = NA, count = NA)  # S3 method for ZarrGroup get_var(z, var, start = NA, count = NA)  # S3 method for `NULL` get_var(z, var, start = NA, count = NA)"},{"path":"/reference/get_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Zarr Variable — get_var","text":"z open ZarrGroup returned open_nz var integer character zero-based index id variable interest name variable interest. start integer vector length equal number dimensions var. Uses R-style 1 indexing. NA entire array returned. count integer vector length equal number dimensions var. Specifies size returned array along dimension question. Can NA start NA. -1 can used indicate given dimension.","code":""},{"path":"/reference/get_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Zarr Variable — get_var","text":"array data","code":""},{"path":"/reference/get_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Zarr Variable — get_var","text":"","code":"if(requireNamespace(\"pizzarr\", quietly = TRUE)) { z <- open_nz(z_demo())  latitude <- get_var(z, 0)  class(latitude) dim(latitude)  pr <- get_var(z, \"pr\") |>   aperm(c(3,2,1))  pr[pr > 1000] <- NA  image(pr[,,1], col = hcl.colors(12, \"PuBuGn\", rev = TRUE),       useRaster = TRUE, axes = FALSE)  dim(pr)  # subsetting  pr <- get_var(z, \"pr\", start = c(1, 1, 1), count = c(5, 5, -1))  dim(pr)  } #> [1]  5  5 81  # equivalent data in NetCDF if(requireNamespace(\"RNetCDF\", quietly = TRUE)) {   nc <- z_demo(format = \"netcdf\")    (get_var(nc, 0))    pr <- get_var(nc, \"pr\")    image(pr[,,1], col = hcl.colors(12, \"PuBuGn\", rev = TRUE),         useRaster = TRUE, axes = FALSE)  }"},{"path":"/reference/inq_att.html","id":null,"dir":"Reference","previous_headings":"","what":"Inquire Zarr Attribute — inq_att","title":"Inquire Zarr Attribute — inq_att","text":"Inquire Zarr Attribute","code":""},{"path":"/reference/inq_att.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inquire Zarr Attribute — inq_att","text":"","code":"inq_att(z, var, att)  # S3 method for character inq_att(z, var, att)  # S3 method for NetCDF inq_att(z, var, att)  # S3 method for `NULL` inq_att(z, var, att)  # S3 method for ZarrGroup inq_att(z, var, att)"},{"path":"/reference/inq_att.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inquire Zarr Attribute — inq_att","text":"z open ZarrGroup returned open_nz var integer character zero-based index id variable interest name variable interest. -1 \"global\" global attributes att integer character zero-based index id attribute interest name attribute interest.","code":""},{"path":"/reference/inq_att.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inquire Zarr Attribute — inq_att","text":"list similar returned att.inq.nc","code":""},{"path":"/reference/inq_att.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inquire Zarr Attribute — inq_att","text":"","code":"z <- open_nz(z_demo())  inq_att(z, -1, 0) #> $id #> [1] 0 #>  #> $name #> [1] \"CDI\" #>  #> $type #> [1] \"character\" #>  #> $length #> [1] 1 #>   inq_att(z, \"global\", \"Conventions\") #> $id #> [1] 2 #>  #> $name #> [1] \"Conventions\" #>  #> $type #> [1] \"character\" #>  #> $length #> [1] 1 #>   inq_att(z, 0, 3) #> $id #> [1] 3 #>  #> $name #> [1] \"long_name\" #>  #> $type #> [1] \"character\" #>  #> $length #> [1] 1 #>   inq_att(z, \"latitude\", \"long_name\") #> $id #> [1] 3 #>  #> $name #> [1] \"long_name\" #>  #> $type #> [1] \"character\" #>  #> $length #> [1] 1 #>   # equivalent data in NetCDF if(requireNamespace(\"RNetCDF\", quietly = TRUE)) {   nc <- z_demo(format = \"netcdf\")    (inq_att(nc, 0, 0)) } #> $id #> [1] 0 #>  #> $name #> [1] \"standard_name\" #>  #> $type #> [1] \"NC_CHAR\" #>  #> $length #> [1] 8 #>"},{"path":"/reference/inq_dim.html","id":null,"dir":"Reference","previous_headings":"","what":"Inquire Zarr Dimension — inq_dim","title":"Inquire Zarr Dimension — inq_dim","text":"NOTE: assumes `_ARRAY_DIMENSION` convention `xarray`","code":""},{"path":"/reference/inq_dim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inquire Zarr Dimension — inq_dim","text":"","code":"inq_dim(z, dim)  # S3 method for character inq_dim(z, dim)  # S3 method for NetCDF inq_dim(z, dim)  # S3 method for ZarrGroup inq_dim(z, dim)  # S3 method for `NULL` inq_dim(z, dim)"},{"path":"/reference/inq_dim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inquire Zarr Dimension — inq_dim","text":"z open ZarrGroup returned open_nz dim integer zero-based index id dimension interest","code":""},{"path":"/reference/inq_dim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inquire Zarr Dimension — inq_dim","text":"list similar returned dim.inq.nc","code":""},{"path":"/reference/inq_dim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inquire Zarr Dimension — inq_dim","text":"","code":"z <- open_nz(z_demo())  inq_dim(z, 0) #> $id #> [1] 0 #>  #> $name #> [1] \"latitude\" #>  #> $length #> [1] 33 #>   inq_dim(z, \"latitude\") #> $id #> [1] 0 #>  #> $name #> [1] \"latitude\" #>  #> $length #> [1] 33 #>   # equivalent data in NetCDF if(requireNamespace(\"RNetCDF\", quietly = TRUE)) {   nc <- z_demo(format = \"netcdf\")    (inq_dim(nc, 0)) } #> $id #> [1] 0 #>  #> $name #> [1] \"latitude\" #>  #> $length #> [1] 33 #>  #> $unlim #> [1] FALSE #>"},{"path":"/reference/inq_grp.html","id":null,"dir":"Reference","previous_headings":"","what":"Inquire Zarr Group — inq_grp","title":"Inquire Zarr Group — inq_grp","text":"NOTE: functions root group thus far","code":""},{"path":"/reference/inq_grp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inquire Zarr Group — inq_grp","text":"","code":"inq_grp(z, group = \"/\")  # S3 method for character inq_grp(z, group = \"/\")  # S3 method for NetCDF inq_grp(z, group = \"/\")  # S3 method for ZarrGroup inq_grp(z, group = \"/\")  # S3 method for `NULL` inq_grp(z, group = \"/\")"},{"path":"/reference/inq_grp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inquire Zarr Group — inq_grp","text":"z open ZarrGroup returned open_nz group NOTUSED","code":""},{"path":"/reference/inq_grp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inquire Zarr Group — inq_grp","text":"list similar returned grp.inq.nc","code":""},{"path":"/reference/inq_grp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inquire Zarr Group — inq_grp","text":"","code":"z <- open_nz(z_demo())  inq_grp(z) #> $grps #> list() #>  #> $name #> [1] \"/\" #>  #> $fullname #> [1] \"/\" #>  #> $dimids #> [1] 0 1 2 #>  #> $varids #> [1] 0 1 2 3 4 #>  #> $ngatts #> [1] 30 #>   # equivalent data in NetCDF if(requireNamespace(\"RNetCDF\", quietly = TRUE)) {#'   inq_grp(z_demo(format = \"netcdf\")) } #> $self #> [1] 65536 #> attr(,\"handle_ptr\") #> <pointer: 0x00000285b8ef6350> #> attr(,\"class\") #> [1] \"NetCDF\" #>  #> $grps #> list() #>  #> $name #> [1] \"/\" #>  #> $fullname #> [1] \"/\" #>  #> $dimids #> [1] 0 1 2 #>  #> $unlimids #> [1] 2 #>  #> $varids #> [1] 0 1 2 3 4 #>  #> $typeids #> integer(0) #>  #> $ngatts #> [1] 30 #>"},{"path":"/reference/inq_nz_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Inquire Zarr Store — inq_nz_source","title":"Inquire Zarr Store — inq_nz_source","text":"Inquire Zarr Store","code":""},{"path":"/reference/inq_nz_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inquire Zarr Store — inq_nz_source","text":"","code":"inq_nz_source(z)  # S3 method for character inq_nz_source(z)  # S3 method for NetCDF inq_nz_source(z)  # S3 method for `NULL` inq_nz_source(z)  # S3 method for ZarrGroup inq_nz_source(z)"},{"path":"/reference/inq_nz_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inquire Zarr Store — inq_nz_source","text":"z open ZarrGroup returned open_nz","code":""},{"path":"/reference/inq_nz_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inquire Zarr Store — inq_nz_source","text":"list similar returned file.inq.nc","code":""},{"path":"/reference/inq_nz_source.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inquire Zarr Store — inq_nz_source","text":"","code":"z <- open_nz(z_demo())  inq_nz_source(z) #> $ndims #> [1] 3 #>  #> $nvars #> [1] 5 #>  #> $ngatts #> [1] 30 #>  #> $format #> [1] \"DirectoryStore\" #>   # equivalent data in NetCDF if(requireNamespace(\"RNetCDF\", quietly = TRUE)) {   nc <- z_demo(format = \"netcdf\")    (inq_nz_source(nc)) } #> $ndims #> [1] 3 #>  #> $nvars #> [1] 5 #>  #> $ngatts #> [1] 30 #>  #> $unlimdimid #> [1] 2 #>  #> $format #> [1] \"classic\" #>  #> $libvers #> [1] \"4.9.2 of Mar  7 2024 22:39:28 $\" #>"},{"path":"/reference/inq_store.html","id":null,"dir":"Reference","previous_headings":"","what":"Inquire Zarr Store — inq_store","title":"Inquire Zarr Store — inq_store","text":"Inquire Zarr Store","code":""},{"path":"/reference/inq_store.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inquire Zarr Store — inq_store","text":"","code":"inq_store(z)"},{"path":"/reference/inq_store.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inquire Zarr Store — inq_store","text":"z open ZarrGroup returned open_zarr","code":""},{"path":"/reference/inq_store.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inquire Zarr Store — inq_store","text":"list similar returned file.inq.nc","code":""},{"path":"/reference/inq_store.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inquire Zarr Store — inq_store","text":"","code":"z <- open_zarr(z_demo())  inq_store(z) #> $ndims #> [1] 3 #>  #> $nvars #> [1] 5 #>  #> $ngatts #> [1] 30 #>  #> $format #> [1] \"DirectoryStore\" #>   # equivalent data in NetCDF if(requireNamespace(\"RNetCDF\", quietly = TRUE)) {   nc <- system.file(\"extdata\", \"bcsd_obs_1999.nc\", package = \"rnz\")    (RNetCDF::file.inq.nc(RNetCDF::open.nc(nc))) } #> $ndims #> [1] 3 #>  #> $nvars #> [1] 5 #>  #> $ngatts #> [1] 30 #>  #> $unlimdimid #> [1] 2 #>  #> $format #> [1] \"classic\" #>  #> $libvers #> [1] \"4.9.2 of Jan 31 2024 21:38:42 $\" #>"},{"path":"/reference/inq_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Inquire Zarr Variable — inq_var","title":"Inquire Zarr Variable — inq_var","text":"Inquire Zarr Variable","code":""},{"path":"/reference/inq_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inquire Zarr Variable — inq_var","text":"","code":"inq_var(z, var)  # S3 method for character inq_var(z, var)  # S3 method for NetCDF inq_var(z, var)  # S3 method for ZarrGroup inq_var(z, var)  # S3 method for `NULL` inq_var(z, var)"},{"path":"/reference/inq_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inquire Zarr Variable — inq_var","text":"z open ZarrGroup returned open_nz var integer character zero-based index id variable interest name variable interest.","code":""},{"path":"/reference/inq_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inquire Zarr Variable — inq_var","text":"list similar returned var.inq.nc","code":""},{"path":"/reference/inq_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inquire Zarr Variable — inq_var","text":"","code":"z <- open_nz(z_demo())  inq_var(z, 0) #> $id #> [1] 0 #>  #> $name #> [1] \"latitude\" #>  #> $type #> [1] \"<f4\" #>  #> $ndims #> [1] 1 #>  #> $dimids #> [1] 0 #>  #> $natts #> [1] 6 #>   inq_var(z, \"pr\") #> $id #> [1] 2 #>  #> $name #> [1] \"pr\" #>  #> $type #> [1] \"<f4\" #>  #> $ndims #> [1] 3 #>  #> $dimids #> [1] 2 0 1 #>  #> $natts #> [1] 4 #>   # equivalent data in NetCDF if(requireNamespace(\"RNetCDF\", quietly = TRUE)) {   nc <- z_demo(format = \"netcdf\")   nc <- rnz::open_nz(nc, backend = \"RNetCDF\")   inq_var(nc, 0) } #> $id #> [1] 0 #>  #> $name #> [1] \"latitude\" #>  #> $type #> [1] \"NC_FLOAT\" #>  #> $ndims #> [1] 1 #>  #> $dimids #> [1] 0 #>  #> $natts #> [1] 6 #>"},{"path":"/reference/nzdump.html","id":null,"dir":"Reference","previous_headings":"","what":"Dump zarr like ncdump — nzdump","title":"Dump zarr like ncdump — nzdump","text":"Prints ncdump-like output console.","code":""},{"path":"/reference/nzdump.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dump zarr like ncdump — nzdump","text":"","code":"nzdump(nz)  # S3 method for character nzdump(nz)  # S3 method for NetCDF nzdump(nz)  # S3 method for `NULL` nzdump(nz)  # S3 method for ZarrGroup nzdump(nz)"},{"path":"/reference/nzdump.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dump zarr like ncdump — nzdump","text":"nz path store, open zarr store, open zarr group","code":""},{"path":"/reference/nzdump.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dump zarr like ncdump — nzdump","text":"list lines printed console invisibly","code":""},{"path":"/reference/nzdump.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dump zarr like ncdump — nzdump","text":"","code":"store <- rnz::z_demo()  nzdump(store) #> zarr { #> dimensions: #> latitude = 33 ; #> longitude = 81 ; #> time = 12 ; #> variables: #> \t<f4 latitude(latitude) ; #> \t\tlatitude:_CoordinateAxisType = Lat ; #> \t\tlatitude:axis = Y ; #> \t\tlatitude:bounds = latitude_bnds ; #> \t\tlatitude:long_name = Latitude ; #> \t\tlatitude:standard_name = latitude ; #> \t\tlatitude:units = degrees_north ; #> \t<f4 longitude(longitude) ; #> \t\tlongitude:_CoordinateAxisType = Lon ; #> \t\tlongitude:axis = X ; #> \t\tlongitude:bounds = longitude_bnds ; #> \t\tlongitude:long_name = Longitude ; #> \t\tlongitude:standard_name = longitude ; #> \t\tlongitude:units = degrees_east ; #> \t<f4 pr(time, latitude, longitude) ; #> \t\tpr:coordinates = time latitude longitude  ; #> \t\tpr:long_name = monthly_sum_pr ; #> \t\tpr:name = pr ; #> \t\tpr:units = mm/m ; #> \t<f4 tas(time, latitude, longitude) ; #> \t\ttas:coordinates = time latitude longitude  ; #> \t\ttas:long_name = monthly_avg_tas ; #> \t\ttas:missing_value = 1.00000002004088e+20 ; #> \t\ttas:name = tas ; #> \t\ttas:units = C ; #> \t<f8 time(time) ; #> \t\ttime:_CoordinateAxisType = Time ; #> \t\ttime:calendar = standard ; #> \t\ttime:standard_name = time ; #> \t\ttime:units = days since 1950-01-01 ; #>  #> // global attributes: #> \t\t:CDI = Climate Data Interface version 1.5.6 (http://code.zmaw.de/projects/cdi) ; #> \t\t:CDO = Climate Data Operators version 1.5.6.1 (http://code.zmaw.de/projects/cdo) ; #> \t\t:Conventions = CF-1.0 ; #> \t\t:History = Translated to CF-1.0 Conventions by Netcdf-Java CDM (CFGridWriter2) #> Original Dataset = bcsd_obs; Translation Date = 2019-01-03T20:03:59.756Z ; #> \t\t:Metadata_Conventions = Unidata Dataset Discovery v1.0 ; #> \t\t:NCO = netCDF Operators version 4.7.6 (Homepage = http://nco.sf.net, Code = http://github.com/nco/nco) ; #> \t\t:acknowledgment = Maurer, E.P., A.W. Wood, J.C. Adam, D.P. Lettenmaier, and B. Nijssen, 2002, A Long-Term Hydrologically-Based Data Set of Land Surface Fluxes and States for the Conterminous United States, J. Climate 15(22), 3237-3251 ; #> \t\t:cdm_data_type = Grid ; #> \t\t:date_created = 2014 ; #> \t\t:date_issued = 2015-11-01 ; #> \t\t:geospatial_lat_max = 37.0625 ; #> \t\t:geospatial_lat_min = 33.0625 ; #> \t\t:geospatial_lon_max = -74.9375 ; #> \t\t:geospatial_lon_min = -84.9375 ; #> \t\t:history = Mon Jan  7 18:59:08 2019: ncks -4 -L3 bcsd_obs_1999_two_var.nc bcsd_obs_1999_two_var.nc.comp #> Thu May 08 12:07:18 2014: cdo monsum gridded_obs/daily/gridded_obs.daily.Prcp.1950.nc gridded_obs/monthly/gridded_obs.monthly.pr.1950.nc ; #> \t\t:id = cida.usgs.gov/bcsd_obs ; #> \t\t:institution = Varies, see http://gdo-dcp.ucllnl.org/downscaled_cmip_projections/ ; #> \t\t:keywords = Atmospheric Temperature, Air Temperature Atmosphere, Precipitation, Rain, Maximum Daily Temperature, Minimum  Daily Temperature ; #> \t\t:keywords_vocabulary = GCMD Science Keywords ; #> \t\t:license = Freely available ; #> \t\t:naming_authority = cida.usgs.gov ; #> \t\t:processing_level = Gridded meteorological observations ; #> \t\t:publisher_email = dblodgett@usgs.gov ; #> \t\t:publisher_name = Center for Integrated Data Analytics ; #> \t\t:publisher_url = https://www.cida.usgs.gov/ ; #> \t\t:summary = These are the monthly observational data used for BCSD downscaling. See: http://gdo-dcp.ucllnl.org/downscaled_cmip_projections/dcpInterface.html#About for more information. ; #> \t\t:time_coverage_end = 1999-12-15T00:00 ; #> \t\t:time_coverage_resolution = P1M ; #> \t\t:time_coverage_start = 1950-01-15T00:00 ; #> \t\t:title = Monthly Gridded Meteorological Observations ; #> }  nc <- z_demo(format = \"netcdf\")  nzdump(nc) #> netcdf classic { #> dimensions: #> \tlatitude = 33 ; #> \tlongitude = 81 ; #> \ttime = UNLIMITED ; // (12 currently) #> variables: #> \tNC_FLOAT latitude(latitude) ; #> \t\tNC_CHAR latitude:standard_name = \"latitude\" ; #> \t\tNC_CHAR latitude:long_name = \"Latitude\" ; #> \t\tNC_CHAR latitude:units = \"degrees_north\" ; #> \t\tNC_CHAR latitude:axis = \"Y\" ; #> \t\tNC_CHAR latitude:bounds = \"latitude_bnds\" ; #> \t\tNC_CHAR latitude:_CoordinateAxisType = \"Lat\" ; #> \tNC_FLOAT longitude(longitude) ; #> \t\tNC_CHAR longitude:standard_name = \"longitude\" ; #> \t\tNC_CHAR longitude:long_name = \"Longitude\" ; #> \t\tNC_CHAR longitude:units = \"degrees_east\" ; #> \t\tNC_CHAR longitude:axis = \"X\" ; #> \t\tNC_CHAR longitude:bounds = \"longitude_bnds\" ; #> \t\tNC_CHAR longitude:_CoordinateAxisType = \"Lon\" ; #> \tNC_FLOAT pr(longitude, latitude, time) ; #> \t\tNC_CHAR pr:long_name = \"monthly_sum_pr\" ; #> \t\tNC_CHAR pr:units = \"mm/m\" ; #> \t\tNC_FLOAT pr:_FillValue = 1.00000002004088e+20 ; #> \t\tNC_CHAR pr:name = \"pr\" ; #> \t\tNC_CHAR pr:coordinates = \"time latitude longitude \" ; #> \tNC_FLOAT tas(longitude, latitude, time) ; #> \t\tNC_CHAR tas:long_name = \"monthly_avg_tas\" ; #> \t\tNC_CHAR tas:units = \"C\" ; #> \t\tNC_FLOAT tas:_FillValue = 1.00000002004088e+20 ; #> \t\tNC_CHAR tas:name = \"tas\" ; #> \t\tNC_FLOAT tas:missing_value = 1.00000002004088e+20 ; #> \t\tNC_CHAR tas:coordinates = \"time latitude longitude \" ; #> \tNC_DOUBLE time(time) ; #> \t\tNC_CHAR time:standard_name = \"time\" ; #> \t\tNC_CHAR time:units = \"days since 1950-01-01 00:00:00\" ; #> \t\tNC_CHAR time:calendar = \"standard\" ; #> \t\tNC_CHAR time:_CoordinateAxisType = \"Time\" ; #>  #> // global attributes: #> \t\tNC_CHAR :CDI = \"Climate Data Interface version 1.5.6 (http://code.zmaw.de/projects/cdi)\" ; #> \t\tNC_CHAR :Conventions = \"CF-1.0\" ; #> \t\tNC_CHAR :history = \"Mon Jan  7 18:59:08 2019: ncks -4 -L3 bcsd_obs_1999_two_var.nc bcsd_obs_1999_two_var.nc.comp #> Thu May 08 12:07:18 2014: cdo monsum gridded_obs/daily/gridded_obs.daily.Prcp.1950.nc gridded_obs/monthly/gridded_obs.monthly.pr.1950.nc\" ; #> \t\tNC_CHAR :CDO = \"Climate Data Operators version 1.5.6.1 (http://code.zmaw.de/projects/cdo)\" ; #> \t\tNC_CHAR :Metadata_Conventions = \"Unidata Dataset Discovery v1.0\" ; #> \t\tNC_CHAR :title = \"Monthly Gridded Meteorological Observations\" ; #> \t\tNC_CHAR :summary = \"These are the monthly observational data used for BCSD downscaling. See: http://gdo-dcp.ucllnl.org/downscaled_cmip_projections/dcpInterface.html#About for more information.\" ; #> \t\tNC_CHAR :keywords = \"Atmospheric Temperature, Air Temperature Atmosphere, Precipitation, Rain, Maximum Daily Temperature, Minimum  Daily Temperature\" ; #> \t\tNC_CHAR :keywords_vocabulary = \"GCMD Science Keywords\" ; #> \t\tNC_CHAR :id = \"cida.usgs.gov/bcsd_obs\" ; #> \t\tNC_CHAR :naming_authority = \"cida.usgs.gov\" ; #> \t\tNC_CHAR :cdm_data_type = \"Grid\" ; #> \t\tNC_CHAR :date_created = \"2014\" ; #> \t\tNC_CHAR :publisher_name = \"Center for Integrated Data Analytics\" ; #> \t\tNC_CHAR :publisher_url = \"https://www.cida.usgs.gov/\" ; #> \t\tNC_CHAR :publisher_email = \"dblodgett@usgs.gov\" ; #> \t\tNC_CHAR :institution = \"Varies, see http://gdo-dcp.ucllnl.org/downscaled_cmip_projections/\" ; #> \t\tNC_CHAR :date_issued = \"2015-11-01\" ; #> \t\tNC_CHAR :processing_level = \"Gridded meteorological observations\" ; #> \t\tNC_DOUBLE :geospatial_lon_min = -84.9375 ; #> \t\tNC_DOUBLE :geospatial_lat_min = 33.0625 ; #> \t\tNC_DOUBLE :geospatial_lon_max = -74.9375 ; #> \t\tNC_DOUBLE :geospatial_lat_max = 37.0625 ; #> \t\tNC_CHAR :time_coverage_start = \"1950-01-15T00:00\" ; #> \t\tNC_CHAR :time_coverage_end = \"1999-12-15T00:00\" ; #> \t\tNC_CHAR :time_coverage_resolution = \"P1M\" ; #> \t\tNC_CHAR :license = \"Freely available\" ; #> \t\tNC_CHAR :acknowledgment = \"Maurer, E.P., A.W. Wood, J.C. Adam, D.P. Lettenmaier, and B. Nijssen, 2002, A Long-Term Hydrologically-Based Data Set of Land Surface Fluxes and States for the Conterminous United States, J. Climate 15(22), 3237-3251\" ; #> \t\tNC_CHAR :History = \"Translated to CF-1.0 Conventions by Netcdf-Java CDM (CFGridWriter2) #> Original Dataset = bcsd_obs; Translation Date = 2019-01-03T20:03:59.756Z\" ; #> \t\tNC_CHAR :NCO = \"netCDF Operators version 4.7.6 (Homepage = http://nco.sf.net, Code = http://github.com/nco/nco)\" ; #> }"},{"path":"/reference/open_nz.html","id":null,"dir":"Reference","previous_headings":"","what":"open netcdf or zarr — open_nz","title":"open netcdf or zarr — open_nz","text":"open netcdf zarr","code":""},{"path":"/reference/open_nz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"open netcdf or zarr — open_nz","text":"","code":"open_nz(nz, backend = NULL, warn = TRUE)  # S3 method for Store open_nz(nz, backend = NULL, warn = TRUE)  # S3 method for character open_nz(nz, backend = NULL, warn = TRUE)  # S3 method for `NULL` open_nz(nz, backend = NULL, warn = TRUE)"},{"path":"/reference/open_nz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"open netcdf or zarr — open_nz","text":"nz pizzarr store, path zarr store, path netcdf resource backend character \"pizzarr\" \"RNetCDF\" NULL (default) try pizzar first fall back RNetCDF warn logical warn warn?","code":""},{"path":"/reference/open_nz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"open netcdf or zarr — open_nz","text":"ZarrGroup NetCDF object","code":""},{"path":"/reference/open_nz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"open netcdf or zarr — open_nz","text":"","code":"if(requireNamespace(\"pizzarr\", quietly = TRUE)) {  z <- z_demo()  bcsd <- open_nz(z)  class(bcsd)  zarr <- pizzarr::DirectoryStore$new(z)  class(zarr)  bcsd <- open_nz(zarr)  class(bcsd)  } #> [1] \"ZarrGroup\" \"R6\"         # equivalent data in NetCDF if(requireNamespace(\"RNetCDF\", quietly = TRUE)) {   nc <- z_demo(format = \"netcdf\")    bcsd <- open_nz(nc)    class(bcsd) } #> Warning: Failed to open as zarr #> Opened as NetCDF #> [1] \"NetCDF\""},{"path":"/reference/open_zarr.html","id":null,"dir":"Reference","previous_headings":"","what":"open zarr — open_zarr","title":"open zarr — open_zarr","text":"open zarr","code":""},{"path":"/reference/open_zarr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"open zarr — open_zarr","text":"","code":"open_zarr(store)"},{"path":"/reference/open_zarr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"open zarr — open_zarr","text":"store pizzarr store path zarr store","code":""},{"path":"/reference/open_zarr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"open zarr — open_zarr","text":"ZarrGroup","code":""},{"path":"/reference/open_zarr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"open zarr — open_zarr","text":"","code":"z <- z_demo()  bcsd <- open_zarr(z)  class(bcsd) #> [1] \"ZarrGroup\" \"R6\"         zarr <- pizzarr::DirectoryStore$new(z)  class(zarr) #> [1] \"DirectoryStore\" \"Store\"          \"R6\"              bcsd <- open_zarr(zarr)  class(bcsd) #> [1] \"ZarrGroup\" \"R6\"         # equivalent data in NetCDF if(requireNamespace(\"RNetCDF\", quietly = TRUE)) {   nc <- system.file(\"extdata\", \"bcsd_obs_1999.nc\", package = \"rnz\")    (RNetCDF::open.nc(nc)) } #> [1] 65536 #> attr(,\"handle_ptr\") #> <pointer: 0x0000020aed17bc80> #> attr(,\"class\") #> [1] \"NetCDF\""},{"path":"/reference/zdump.html","id":null,"dir":"Reference","previous_headings":"","what":"Dump zarr like ncdump — zdump","title":"Dump zarr like ncdump — zdump","text":"Prints ncdump-like output console.","code":""},{"path":"/reference/zdump.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dump zarr like ncdump — zdump","text":"","code":"zdump(store)"},{"path":"/reference/zdump.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dump zarr like ncdump — zdump","text":"store path store, open zarr store, open zarr group","code":""},{"path":"/reference/zdump.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dump zarr like ncdump — zdump","text":"list lines printed console invisibly","code":""},{"path":"/reference/zdump.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dump zarr like ncdump — zdump","text":"","code":"store <- rnz::z_demo()  zdump(store) #> zarr { #> dimensions: #> latitude = 33 ; #> longitude = 81 ; #> time = 12 ; #> variables: #> \t<f4 latitude(latitude) ; #> \t\tlatitude:_CoordinateAxisType = Lat ; #> \t\tlatitude:axis = Y ; #> \t\tlatitude:bounds = latitude_bnds ; #> \t\tlatitude:long_name = Latitude ; #> \t\tlatitude:standard_name = latitude ; #> \t\tlatitude:units = degrees_north ; #> \t<f4 longitude(longitude) ; #> \t\tlongitude:_CoordinateAxisType = Lon ; #> \t\tlongitude:axis = X ; #> \t\tlongitude:bounds = longitude_bnds ; #> \t\tlongitude:long_name = Longitude ; #> \t\tlongitude:standard_name = longitude ; #> \t\tlongitude:units = degrees_east ; #> \t<f4 pr(time, latitude, longitude) ; #> \t\tpr:coordinates = time latitude longitude  ; #> \t\tpr:long_name = monthly_sum_pr ; #> \t\tpr:name = pr ; #> \t\tpr:units = mm/m ; #> \t<f4 tas(time, latitude, longitude) ; #> \t\ttas:coordinates = time latitude longitude  ; #> \t\ttas:long_name = monthly_avg_tas ; #> \t\ttas:missing_value = 1.00000002004088e+20 ; #> \t\ttas:name = tas ; #> \t\ttas:units = C ; #> \t<f8 time(time) ; #> \t\ttime:_CoordinateAxisType = Time ; #> \t\ttime:calendar = standard ; #> \t\ttime:standard_name = time ; #> \t\ttime:units = days since 1950-01-01 ; #>  #> // global attributes: #> \t\t:CDI = Climate Data Interface version 1.5.6 (http://code.zmaw.de/projects/cdi) ; #> \t\t:CDO = Climate Data Operators version 1.5.6.1 (http://code.zmaw.de/projects/cdo) ; #> \t\t:Conventions = CF-1.0 ; #> \t\t:History = Translated to CF-1.0 Conventions by Netcdf-Java CDM (CFGridWriter2) #> Original Dataset = bcsd_obs; Translation Date = 2019-01-03T20:03:59.756Z ; #> \t\t:Metadata_Conventions = Unidata Dataset Discovery v1.0 ; #> \t\t:NCO = netCDF Operators version 4.7.6 (Homepage = http://nco.sf.net, Code = http://github.com/nco/nco) ; #> \t\t:acknowledgment = Maurer, E.P., A.W. Wood, J.C. Adam, D.P. Lettenmaier, and B. Nijssen, 2002, A Long-Term Hydrologically-Based Data Set of Land Surface Fluxes and States for the Conterminous United States, J. Climate 15(22), 3237-3251 ; #> \t\t:cdm_data_type = Grid ; #> \t\t:date_created = 2014 ; #> \t\t:date_issued = 2015-11-01 ; #> \t\t:geospatial_lat_max = 37.0625 ; #> \t\t:geospatial_lat_min = 33.0625 ; #> \t\t:geospatial_lon_max = -74.9375 ; #> \t\t:geospatial_lon_min = -84.9375 ; #> \t\t:history = Mon Jan  7 18:59:08 2019: ncks -4 -L3 bcsd_obs_1999_two_var.nc bcsd_obs_1999_two_var.nc.comp #> Thu May 08 12:07:18 2014: cdo monsum gridded_obs/daily/gridded_obs.daily.Prcp.1950.nc gridded_obs/monthly/gridded_obs.monthly.pr.1950.nc ; #> \t\t:id = cida.usgs.gov/bcsd_obs ; #> \t\t:institution = Varies, see http://gdo-dcp.ucllnl.org/downscaled_cmip_projections/ ; #> \t\t:keywords = Atmospheric Temperature, Air Temperature Atmosphere, Precipitation, Rain, Maximum Daily Temperature, Minimum  Daily Temperature ; #> \t\t:keywords_vocabulary = GCMD Science Keywords ; #> \t\t:license = Freely available ; #> \t\t:naming_authority = cida.usgs.gov ; #> \t\t:processing_level = Gridded meteorological observations ; #> \t\t:publisher_email = dblodgett@usgs.gov ; #> \t\t:publisher_name = Center for Integrated Data Analytics ; #> \t\t:publisher_url = https://www.cida.usgs.gov/ ; #> \t\t:summary = These are the monthly observational data used for BCSD downscaling. See: http://gdo-dcp.ucllnl.org/downscaled_cmip_projections/dcpInterface.html#About for more information. ; #> \t\t:time_coverage_end = 1999-12-15T00:00 ; #> \t\t:time_coverage_resolution = P1M ; #> \t\t:time_coverage_start = 1950-01-15T00:00 ; #> \t\t:title = Monthly Gridded Meteorological Observations ; #> }"},{"path":"/reference/z_demo.html","id":null,"dir":"Reference","previous_headings":"","what":"nz demo data directory — z_demo","title":"nz demo data directory — z_demo","text":"Data derived : https://gdo-dcp.ucllnl.org/downscaled_cmip_projections/","code":""},{"path":"/reference/z_demo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nz demo data directory — z_demo","text":"","code":"z_demo(format = \"zarr\")"},{"path":"/reference/z_demo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"nz demo data directory — z_demo","text":"format character \"netcdf\" \"zarr\"","code":""},{"path":"/reference/z_demo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nz demo data directory — z_demo","text":"netcdf sample data unzips returns demo Zarr store directory","code":""},{"path":"/reference/z_demo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"nz demo data directory — z_demo","text":"","code":"list.files(z_demo(format = \"zarr\"), recursive = TRUE, all.files = TRUE) #>  [1] \".zattrs\"           \".zgroup\"           \".zmetadata\"        #>  [4] \"latitude/.zarray\"  \"latitude/.zattrs\"  \"latitude/0\"        #>  [7] \"longitude/.zarray\" \"longitude/.zattrs\" \"longitude/0\"       #> [10] \"pr/.zarray\"        \"pr/.zattrs\"        \"pr/0.0.0\"          #> [13] \"tas/.zarray\"       \"tas/.zattrs\"       \"tas/0.0.0\"         #> [16] \"time/.zarray\"      \"time/.zattrs\"      \"time/0\"             basename(z_demo(format = \"netcdf\")) #> [1] \"bcsd_obs_1999.nc\""},{"path":"/news/index.html","id":"rnz-v020","dir":"Changelog","previous_headings":"","what":"rnz v0.2.0","title":"rnz v0.2.0","text":"v0.2.0 rnz introduces S3 methods package brings RNetCDF alternate dispatch pathway.","code":""},{"path":"/news/index.html","id":"rnz-v010","dir":"Changelog","previous_headings":"","what":"rnz v0.1.0","title":"rnz v0.1.0","text":"initial release rnz includes read-set zarr utilities mimid RNetCDF function signatures.","code":""}]
